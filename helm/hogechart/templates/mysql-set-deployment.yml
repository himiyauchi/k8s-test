apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs:
  - /metrics
  verbs: ["get"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: default
---
apiVersion: v1
data:
  prometheus.yml: |
    global:
      scrape_interval: 10s
    rule_files:
    - rules.yaml
    alerting:
      alertmanagers:
        - kubernetes_sd_configs:
          - role: pod
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          relabel_configs:
          - source_labels: [__meta_kubernetes_pod_label_name]
            regex: alertmanager
            action: keep
    scrape_configs:
    - job_name: 'kubelet'
      kubernetes_sd_configs:
      - role: node
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
    - job_name: 'k8spods'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_container_name]
        target_label: job
      - source_labels: [__meta_kubernetes_pod_container_name]
        regex: kube-proxy
        action: drop
      - source_labels: [__meta_kubernetes_pod_label_k8s_app]
        regex: 'kube-dns'
        action: drop
    - job_name: 'kubedns'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_label_k8s_app
        - __meta_kubernetes_pod_container_port_protocol
        - __meta_kubernetes_pod_container_port_name
        separator: '/'
        regex: 'kube-dns/TCP/metrics'
        action: keep
    - job_name: 'kubernetes-apiservers'
      kubernetes_sd_configs:
      - role: endpoints
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https
    - job_name: 'kube-proxy'
      honor_labels: true
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - action: keep
        source_labels:
        - __meta_kubernetes_namespace
        - __meta_kubernetes_pod_name
        separator: '/'
        regex: 'kube-system/kube-proxy.+'
      - source_labels:
        - __address__
        action: replace
        target_label: __address__
        regex: (.+?)(\\:\\d+)?
        replacement: $1:10249
  rules.yaml: |
    groups:
    - name: example
      rules:
      - alert: NodeInstanceDown
        expr: up{job='node'} == 0
        for: 30s
kind: ConfigMap
metadata:
  name: prometheus-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
spec:
  selector:
    matchLabels:
      app: prometheus
  replicas: 1
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      containers:
      - name: prometheus
        image: prom/prometheus:v2.1.0
        ports:
        - containerPort: 9090
          name: default
        volumeMounts:
        - name: config-volume
          mountPath: /etc/prometheus
      volumes:
      - name: config-volume
        configMap:
         name: prometheus-config
---
kind: Service
apiVersion: v1
metadata:
  name: prometheus
spec:
  selector:
    app: prometheus
  type: LoadBalancer
  ports:

   - protocol: TCP
     port: 9090
     targetPort: 9090
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:latest
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: root-password
        ports:
        - containerPort: 3306
          name: mysql
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  namespace: default
type: Opaque
data:
  root-password: cGFzc3dvcmQ=
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: default
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysqld-exporter
spec:
  selector:
    matchLabels:
      app: mysqld-exporter
  replicas: 1
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9104"
      labels:
        app: mysqld-exporter
    spec:
      containers:
      - name: mysqld-exporter
        image: prom/mysqld-exporter:latest
        env:
        - name: DATA_SOURCE_NAME
          valueFrom:
            secretKeyRef:
              name: mysql-ex-secret
              key: password
        ports:
        - containerPort: 9104
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-ex-secret
  namespace: default
type: Opaque
data:
  password: cm9vdDpwYXNzd29yZEAobXlzcWw6MzMwNikv
---
kind: Service
apiVersion: v1
metadata:
  name: mysql-ex-svc
spec:
  selector:
    app: mysqld-exporter
  type: LoadBalancer
  ports:
   - protocol: TCP
     port: 9104
     targetPort: 9104
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: node-exporter
spec:
  selector:
    matchLabels:
      app: node-exporter
  template:
    metadata:
      labels:
        app: node-exporter
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9100"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: node-exporter
        image: prom/node-exporter
        ports:
        - containerPort: 9100
      hostNetwork: true
      hostPID: true
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cadvisor
spec:
  selector:
    matchLabels:
      app: cadvisor
  template:
    metadata:
      labels:
        app: cadvisor
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: cadvisor
        image: google/cadvisor
        ports:
        - containerPort: 8080
      hostNetwork: true
      hostPID: true
---
kind: Service
apiVersion: v1
metadata:
  name: cadvisor-svc
spec:
  selector:
    app: cadvisor
  type: LoadBalancer
  ports:
   - protocol: TCP
     port: 8080
     targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deploymnt-ksm
spec:
  selector:
    matchLabels:
      app: ksm
  replicas: 1
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8081"
        prometheus.io/path: "/metrics"
      labels:
        app: ksm
    spec:
      containers:
      - name: ksm
        image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.4.2
        ports:
        - containerPort: 8081
          name: default
---
apiVersion: v1
kind: Service
metadata:
  name: ksm-svc
spec:
  selector:
    app: ksm
  type: LoadBalancer
  ports:
  - protocol: TCP
    port: 8081
    targetPort: 8081
---
apiVersion: v1
kind: Secret
metadata:
  name: alertmanager-secret
type: Opaque
data:
  alertmanager.yaml: Z2xvYmFsOg0KICBzbGFja19hcGlfdXJsOiBodHRwOi8vaG9nZWhvZ2UuY29tDQoNCnJvdXRlOg0KICByZWNlaXZlcjogJ3NsYWNrLW5vdGlmaWNhdGlvbnMnDQoNCnJlY2VpdmVyczoNCi0gbmFtZTogJ3NsYWNrLW5vdGlmaWNhdGlvbnMnDQogIHNsYWNrX2NvbmZpZ3M6DQogIC0gY2hhbm5lbDogaG9nZS1jaGFubmVsDQogICAgdGl0bGU6ICJ7eyByYW5nZSAuQWxlcnRzIH19e3sgLkFubm90YXRpb25zLnN1bW1hcnkgfX1cbnt7IGVuZCB9fSINCiAgICB0ZXh0OiAie3sgcmFuZ2UgLkFsZXJ0cyB9fXt7IC5Bbm5vdGF0aW9ucy5kZXNjcmlwdGlvbiB9fVxue3sgZW5kIH19Ig==
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alertmanager
spec:
  selector:
    matchLabels:
      app: alertmanager
  replicas: 1
  template:
    metadata:
      labels:
        app: alertmanager
    spec:
      containers:
      - name: alertmanager
        image: prom/alertmanager:v0.22.2
        args:
        - --config.file=/etc/alertmanager/alertmanager.yaml
        ports:
        - containerPort: 9093
        volumeMounts:
        - name: alertmanager-volume
          mountPath: /etc/alertmanager
      volumes:
      - name: alertmanager-volume
        secret:
          secretName: alertmanager-secret
---
apiVersion: v1
kind: Service
metadata:
  name: alertmanager
spec:
  selector:
    app: alertmanager
  type: LoadBalancer
  ports:
  - protocol: TCP
    port: 9093
    targetPort: 9090
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment-grafana
spec:
  selector:
    matchLabels:
      app: pod-grafana
  replicas: 1
  template:
    metadata:
      labels:
        app: pod-grafana
    spec:
      containers:
        - name: pod-grafana
          image: grafana/grafana
          ports:
           - containerPort: 3000
             name: default
---
kind: Service
apiVersion: v1
metadata:
  name: grafana
spec:
  selector:
    app: pod-grafana
  type: LoadBalancer
  ports:
   - protocol: TCP
     port: 80
     targetPort: 3000